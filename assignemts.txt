Assignment-11: Constructor
1. Define a class Numbers with size and arr pointer as instance variables. Provide constructor to initialise instance members, dynamically allocate an array of given size and store address in arr variable of object. Also define destructor to deallocate memory of array. Implement deep copy using copy constructor to avoid memory issues.
2. Define a class student and write a program to enter student details using constructor and define member function to display all the details.
3. Define a class Date with d, m, y as instance variables. Initialise members using initialisers.
4. Define a class Room for a hotel management project with room number, room type, is_AC, price as instance variables. Initialise instance variables using constructor.
5. Define Circle class with radius as instance variable. Define two constructors in the class -non parameterised and parameterised.

Assignment-12: (Missing or Not Provided)

Assignment-13: Operator Overloading
1. Consider a class Distance:
   class Distance {
       int km, m, cm;
       public:
       // methods;
   };
   Overload the operator+ to add two distance objects.
2. In Question-1, define operator pre decrement and post decrement to decrease distance by 1 cm.
3. Consider the following class Array:
   class Array {
       int *p;
       int size;
       public:
       // methods;
   };
   Define constructor to allocate an array of given size (size is given through parameter). Define a subscript operator to access element at given index. Define destructor to deallocate the memory of array.

Assignment-14: Operator Overloading, friend operator
1. Define a class Complex and overload following operators as a friend:
   a. +
   b. -
   c. *
2. Define a class Time with appropriate instance variables and member functions. Overload following operators:
   a. << insertion operator
   b. >> extraction operator
3. In Question-2, overload operator = to perform copy of Time object.
4. Consider the following class Array:
   class Array {
       int *p;
       int size;
       public:
       // methods
   };
   Define operator = to perform deep copy of Array objects.
5. In Question-4, define a friend operator + to concatenate two Array objects.

Assignment-15: Operator Overloading, friend operator
1. Define a class Complex and provide a unary friend operator - to negate the real and imaginary part of a complex number.
2. Define a class Integer with instance variable of type int. Provide a friend logical operator not (!). Also define a friend operator == to compare two Integer objects.
3. Create a Coordinate class with 2 instance variables x and y. Overload comma operator such that when you write c3 = (c1 , c2 ) then c2 is assigned to c3.
4. In Question-3, provide overloaded insertion and extraction operators.
5. Define a class Student with roll no, name and age as instance variables. Create setStudent() and showStudent() methods. Overload operator == to compare two Student objects.

Assignment-16: Pointer, this, DMA
1. Define a class Person with name and age as instance variables. Provide parameterised constructor with two formal arguments name & age, to initialise instance variables.
2. Define a class Complex with instance variables a and b to store real and imaginary part of a complex number. Provide setData() method with formal arguments with the name a and b, to set the values of instance variables. Also define showData() method to display instance member variable values.
3. In Question-2, write a non-member function in which instantiate Complex class dynamically. Initialise instance variables and display their values.

Assignment-17: Pointer, this, DMA
1. Define a class Time with instance variables hr, min and sec. Provide instance methods setTime() and showTime(). setTime() method has formal arguments with the same name as instance variables. Also define setters and getters.
2. In Question-1, define a method to dynamically create an array of Time objects with specified size (received through argument) and return array.
3. In Question-1, define a method to sort Time object array.
4. In Question-1, define a method to display Time object array values. Array is received through argument.
5. Define a class String with char pointer and length of the string as instance member variables. Define a method to dynamically create an array of char type and hold the input string in such a way that the array length is just enough to accommodate the input string.
6. In Question-5, define methods to convert string into uppercase, lowercase.
7. In Question-5, define methods to print string, return string, return length of string.

Assignment-18: Inheritance
1. Define a class Person with name and age as instance variables as private members. Provide setters and getters as protected methods. Derive a class Employee from Person class with private instance variable salary. Provide public methods setEmployee() and showEmployee().
2. Define a class Circle with radius as private instance variable and setRadius(), getRadius(), getArea() as public instance methods. Define a class ThickCircle as a subclass of Circle with thickness as private instance variable and getThickness(), setThickness() as public instance methods. Provide an overridden method getArea() to calculate area of thick portion of circle.
3. Define a class Coordinate with x and y as instance variables. Define overloaded versions of getDistance(), first with no argument calculating distance from origin, and second with one argument of Coordinate type to calculate distance between two coordinates. Also define other methods if required.
4. Define a class Shape with shapeName as instance variable. Provide setter and getter.
5. In Question-3 & 4, derive a class StraightLine from Shape with two Coordinate type objects as instance members. Provide methods to setLine(), getDistance() and showLine()

Assignment-19: Inheritance
1. Define a class Game with an array of 5 int variables as instance member to store the score of each of 5 rounds. Provide method to setScore(int round, int score). Also provide method getScore(int round).
2. In Question-1, derive a class GameResult with an array of 5 int type variables to store the result in each round. Result value is 2 for win, 0 for lose and 1 for draw. Provide methods to set Result and getResult. Write method to calculate final result of the game.
3. Define a class Actor with name, age as instance variables and setter, getters as instance methods. Derive a class TVActor as a derived class of Actor with instance variable to store number of TV projects done or running and define setter, getter. Also define setTVActor() and showTVActor(). Define a class MovieActor as a derived class of Actor with instance variable to store number of movies done or running and define setter, getter. Also define setMovieActor() and showMovieActor(). Derive a class AllScreenActor from TVActor and MovieActor. Define a method to setActorData() and showActorData().

Assignment-20: Overriding, Late Binding, Abstract class
1. Define a class A with two int type member variables. Define a member function to setData() and showData() to set and display values of member variables. Also define a member function with the name input() to take input from the user. Define a class B with one int type member variable. Override input() function in order to input three values from the user for all three member variables. Also override showData() function to display all three values.
2. Define a class Shape with member variable to store name of the shape (like rectangle, square, circle, etc.) Provide methods to set and display name of the shape. Define a pure virtual function area() in Shape class. Define two derived classes of Shape, one is rectangle and second is square. Define appropriate members in both the classes. Demonstrate usage of the classes by making driver function main().

Assignment-21: File Handling
1. Write a C++ program to copy content of file and store in other file.
2. Write a C++ program to read and display content of a file.
3. Define a class Employee with empid, name and salary as instance variables. Also provide instance methods to input and display Employee record.
4. In Question-3, define a member function to store new employee record in a file.
5. In Question-3, define a member function to print all employee records stored in a file.
6. In Question-3, define a member function to search an employee by his empid in a file. Print his record if found, otherwise display a message of search failed.
7. In Question-3, define a member function to edit employee data of given empid.
8. In Question-3, define a member function to delete an employee record of given empid.


Assignment-12: Operator Overloading
1. Define a class Complex with appropriate instance variables and member functions. Define following operators in the class:
   1. +
   2. -
   3. *
   4. ==
2. Create a class Time which contains hour, min and second as fields. Overload greater than (>) operator to compare two time objects.
3. In Question-2, overload pre-increment and post-increment operator to increment Time object value by one second.
4. In Question-2, overload operator+ to add two Time objects.
5. Define a class matrix to represent 3x3 matrix. Provide appropriate instance methods. Also define operator +, operator -, operator * to perform addition, subtraction and multiplication operations respectively.

Assignment-13: Operator Overloading
1. Define a C++ class fraction
   class fraction {
       long numerator;
       long denominator;
   public:
       fraction (long n=0, long d=0);
   };
   Define an operator + to add two fraction objects.
2. In Question-1, define an operator < to compare two fraction objects.
3. Consider a class Distance:
   class Distance {
       int km, m, cm;
   public:
       // methods;
   };
   Overload the operator+ to add two distance objects.
4. In Question-3, define operator pre decrement and post decrement to decrease distance by 1 cm.
5. Consider the following class Array:
   class Array {
       int *p;
       int size;
   public:
       // methods;
   };
   Define constructor to allocate an array of given size (size is given through parameter). Define a subscript operator to access element at given index. Define destructor to deallocate the memory of array.
